/* automatically generated by rust-bindgen 0.64.0 */

extern "C" {
    pub fn hello() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn add(a: ::std::os::raw::c_int, b: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Element {
    pub val: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Element() {
    const UNINIT: ::std::mem::MaybeUninit<Element> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Element>(),
        4usize,
        concat!("Size of: ", stringify!(Element))
    );
    assert_eq!(
        ::std::mem::align_of::<Element>(),
        4usize,
        concat!("Alignment of ", stringify!(Element))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Element),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct System {
    pub elem: *mut Element,
    pub elem_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_System() {
    const UNINIT: ::std::mem::MaybeUninit<System> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<System>(),
        16usize,
        concat!("Size of: ", stringify!(System))
    );
    assert_eq!(
        ::std::mem::align_of::<System>(),
        8usize,
        concat!("Alignment of ", stringify!(System))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(System),
            "::",
            stringify!(elem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elem_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(System),
            "::",
            stringify!(elem_count)
        )
    );
}
extern "C" {
    pub fn square_elems(sys: System);
}
